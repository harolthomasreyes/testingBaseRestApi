{
	"info": {
		"_postman_id": "e7959701-fad7-410e-866b-64408d912d47",
		"name": "Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2699440"
	},
	"item": [
		{
			"name": "LogIn",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"const token = responseData.token; \r",
									"pm.globals.set(\"Token\", token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/api/Auth/login",
							"host": [
								"{{Url}}"
							],
							"path": [
								"api",
								"Auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has expected structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"products\");   \r",
									"    pm.expect(jsonData).to.have.property(\"error\", null); \r",
									"  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/api/Product",
							"host": [
								"{{Url}}"
							],
							"path": [
								"api",
								"Product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has expected structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    if(jsonData.success === true){\r",
									"        pm.expect(jsonData).to.have.property(\"message\", \"Product Created\");\r",
									"        pm.expect(jsonData).to.have.property(\"error\", null);\r",
									"    }else{\r",
									"        pm.expect(jsonData).to.have.property(\"error\");\r",
									"    }\r",
									"  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New testing product\",\r\n  \"price\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/api/Product",
							"host": [
								"{{Url}}"
							],
							"path": [
								"api",
								"Product"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has expected structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    if(jsonData.product === undefined || jsonData.product === null){\r",
									"        pm.expect(jsonData).to.have.property(\"product\", null);\r",
									"        pm.expect(jsonData).to.have.property(\"error\");\r",
									"    }else{\r",
									"        pm.expect(jsonData).to.have.property(\"product\");\r",
									"        pm.expect(jsonData.product).to.have.property(\"name\", \"New testing product\");\r",
									"        pm.expect(jsonData).to.have.property(\"error\", null);\r",
									"    }\r",
									"  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/api/Product/1",
							"host": [
								"{{Url}}"
							],
							"path": [
								"api",
								"Product",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has expected structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    if(jsonData.success === true){\r",
									"        pm.expect(jsonData).to.have.property(\"message\", \"Product Updated\");\r",
									"        pm.expect(jsonData).to.have.property(\"error\", null);\r",
									"    }else{\r",
									"        pm.expect(jsonData).to.have.property(\"error\", null);\r",
									"        pm.expect(jsonData).to.have.property(\"message\", \"Product does not exists\");\r",
									"    }  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New testing product updated\",\r\n  \"price\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/api/Product/1",
							"host": [
								"{{Url}}"
							],
							"path": [
								"api",
								"Product",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has expected structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Product Removed\");\r",
									"    pm.expect(jsonData).to.have.property(\"error\", null);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New testing product\",\r\n  \"price\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/api/Product/12",
							"host": [
								"{{Url}}"
							],
							"path": [
								"api",
								"Product",
								"12"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Status code is 200\", function (){\r",
					"    pm.response.to.have.status(200);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "Url",
			"value": "http://localhost:5298",
			"type": "string"
		}
	]
}